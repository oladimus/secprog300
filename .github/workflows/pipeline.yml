name: Security Pipeline

on:
  push:
    branches: [ "main" ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Fix permissions
        run: sudo chown -R $USER:$USER .

      - name: Update tools
        run: |
          sudo apt update
          sudo apt upgrade -y
      
      - name: Start sonarqube
        run: sudo systemctl start sonarqube

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Stop and remove any docker containers
        run: |
          docker-compose down -v
          docker container prune -f

      - name: Docker Compose Build
        run: docker-compose up -d --build

      - name: Setup python virtual env and install requirements (for Snyk specifically)
        run: |
          python3 -m venv env
          source env/bin/activate
          pip install -r backend/requirements.txt

      - name: Run Sonarqube scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Run Snyk
        run: |
          source env/bin/activate
          snyk test --all-projects --severity-threshold=critical
          snyk monitor --all-projects || true
          deactivate
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Semgrep
        run: |
          pipx upgrade semgrep
          semgrep scan --config auto --json > semgrepresults.json
      

      - name: Run Trivy filesystem scan
        run: trivy fs . --format table --output trivy-fs.txt
      
      - name: Trivy Container scan
        run: |
          containers=$(docker-compose ps -q)
          for container in $containers; do
            image=$(docker inspect --format='{{.Config.Image}}' $container)
            filename=$(echo "$image" | sed 's/[^a-zA-Z0-9._-]/_/g')
            echo "Scanning $image"
            trivy image $image --format table --output ${filename}.txt
          done

      - name: OWASP ZAP
        run: |
            docker run --rm -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy zap-baseline.py -t ${{ secrets.APP_URL }} -r zap-report.html -I
      
      - name: OWASP ZAP 2
        run: |
            docker run --rm -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy zap-baseline.py -t http://192.168.232.128:8000 -r zap-report2.html -I
      
      - name: Upload all security scan reports
        if: always()
        uses: actions/upload-artifact@v4
        with: 
          name: security reports
          path: |
            semgrepresults.json
            trivy-fs.txt
            secprog300_backend.txt
            secprog300_frontend.txt
            redis*.txt
            zap-report.html
            zap-report2.html

